//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use migration::sea_orm;
use sea_orm::{entity::prelude::*, Set};
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use validator::Validate;
use chrono::NaiveDateTime as DateTime;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub pid: Uuid,
    #[sea_orm(unique)]
    pub email: String,
    pub first_name: String,
    pub last_name: String,
    pub password: Option<String>,
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[derive(Debug, Validate, Deserialize)]
pub struct Validator {
    #[validate(length(min = 2, message = "Name must be at least 2 characters long."))]
    pub first_name: String,
    #[validate(length(min = 2, message = "Name must be at least 2 characters long."))]
    pub last_name: String,
    #[validate(email)]
    pub email: String,
    #[validate(length(min = 8, message = "Password must be at least 8 characters long."))]
    pub password: String,
}


impl ActiveModel {
    fn validator(&self) -> Validator {
        Validator {
            first_name: self.first_name.as_ref().to_owned(),
            last_name: self.last_name.as_ref().to_owned(),
            email: self.email.as_ref().to_owned(),
            password: self.password.as_ref().to_owned().unwrap(),
        }
    }
}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let validator = self.validator();
        let validator_res = validator.validate();
        if let Err(e) = validator_res {
            return Err(DbErr::Custom(e.to_string()));
        }
        if insert {
            let mut this = self;
            this.pid = Set(Uuid::new_v4());
            Ok(this)
        } else {
            Ok(self)
        }
    }
}
