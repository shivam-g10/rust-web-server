//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use migration::sea_orm;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use uuid::Uuid;
use chrono::NaiveDateTime as DateTime;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sessions")]
pub struct Model {
    pub created_at: DateTime,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub session_id: Uuid,
    #[sea_orm()]
    pub user_id: i32
}


#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    User,
}
impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::User => Entity::belongs_to(super::users::Entity)
                .from(Column::UserId)
                .to(super::users::Column::Id)
                .into(),
        }
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
